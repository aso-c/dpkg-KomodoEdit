#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS #= -v

# The build architecture is the architecture on which debian/rules is run
# and the package build is performed.
# The host architecture is the architecture on which the resulting package
# will be installed and run.
# These are normally the same, but may be different in the case of cross-compilation
# (building packages for one architecture on machines of a different architecture).

# Variables set for cross-compiling:
# build i386 package on amd64 (x86-64) machine
# simply uncomment all variables & use debuild -b -ai386

## architecture on which debian/rules is run and the package build is performed - amd64.
# the Debian architecture
DEB_BUILD_ARCH=amd64
# the Debian CPU name
DEB_BUILD_ARCH_CPU=amd64
# the Debian System name
DEB_BUILD_ARCH_OS=linux
DEB_BUILD_ARCH_BITS=64
DEB_BUILD_ARCH_ENDIAN=little
# the GNU style architecture specification string
DEB_BUILD_GNU_TYPE=x86_64-linux-gnu
# the CPU part of DEB_*_GNU_TYPE
DEB_BUILD_GNU_CPU=x86_64
# the System part of DEB_*_GNU_TYPE
DEB_BUILD_GNU_SYSTEM=linux-gnu
#DEB_BUILD_MULTIARCH=x86_64-linux-gnu

## Target architecture on which the resulting package# will be installed and run i386.
# the Debian architecture
DEB_HOST_ARCH = i386
# the Debian CPU name
DEB_HOST_ARCH_CPU=i386
# the Debian System name
DEB_HOST_ARCH_OS=linux
DEB_HOST_ARCH_BITS=32
DEB_HOST_ARCH_ENDIAN=little
# the CPU part of DEB_*_GNU_TYPE
DEB_HOST_GNU_CPU=i686
# the System part of DEB_*_GNU_TYPE
DEB_HOST_GNU_SYSTEM=linux-gnu
# the GNU style architecture specification string
DEB_HOST_GNU_TYPE=i686-linux-gnu
#DEB_HOST_MULTIARCH=i686-linux-gnu

#It is important to understand that the DEB_*_ARCH string
# only determines which Debian architecture we are building on or for.
# It should not be used to get the CPU or system information;
# the DEB_*_ARCH_CPU and DEB_*_ARCH_OS variables should be used for that.
# GNU style variables should generally only be used with upstream build systems.



# Makefile snippet defining the following variables:
#
# DEB_SOURCE: the source package name
# DEB_VERSION: the full version of the package (epoch + upstream vers. + revision)
# DEB_VERSION_EPOCH_UPSTREAM: the package's version without the Debian revision
# DEB_VERSION_UPSTREAM_REVISION: the package's version without the Debian epoch
# DEB_VERSION_UPSTREAM: the package's upstream version
# DEB_DISTRIBUTION: the distribution(s) listed in the current entry of debian/changelog

dpkg_late_eval ?= $(or $(value DPKG_CACHE_$(1)),$(eval DPKG_CACHE_$(1) := $(shell $(2)))$(value DPKG_CACHE_$(1)))

DEB_SOURCE = $(call dpkg_late_eval,DEB_SOURCE,dpkg-parsechangelog -SSource)
DEB_VERSION = $(call dpkg_late_eval,DEB_VERSION,dpkg-parsechangelog -SVersion)
DEB_VERSION_EPOCH_UPSTREAM = $(call dpkg_late_eval,DEB_VERSION_EPOCH_UPSTREAM,echo '$(DEB_VERSION)' | sed -e 's/-[^-]*$$//')
DEB_VERSION_UPSTREAM_REVISION = $(call dpkg_late_eval,DEB_VERSION_UPSTREAM_REVISION,echo '$(DEB_VERSION)' | sed -e 's/^[0-9]*://')
DEB_VERSION_UPSTREAM = $(call dpkg_late_eval,DEB_VERSION_UPSTREAM,echo '$(DEB_VERSION_EPOCH_UPSTREAM)' | sed -e 's/^[0-9]*://')
DEB_DISTRIBUTION = $(call dpkg_late_eval,DEB_DISTRIBUTION,dpkg-parsechangelog -SDistribution)





# запускаем все остальные deb-helper'ы "по умолчанию"
# (про которые мы как раз ничего не знаем):
%:
	dh $@ 

#pkg_name = openscad
#pkg_ver = 2014.03
#pkg_arch = x86-32
#pkg_ext = tar.gz
#
##deb_ = debian
##pkg_root = $(deb_)/openscad
##src_org = $(deb_)/source
##bin_org = $(deb_)/tmp/$(pkg_name)
##bin_root = $(deb_)/tmp
bin_root = debian/tmp
#
#inst = cp $(bin_root)/$(pkg_name)/$(1) debian/$(pkg_name)$(2)
#
override_dh_auto_install:

	@echo '# DEB_SOURCE: the source package name: $(DEB_SOURCE)'
	@echo '# DEB_VERSION: the full version of the package (epoch + upstream vers. + revision): $(DEB_VERSION)'
	@echo '# DEB_VERSION_EPOCH_UPSTREAM: the packagess version without the Debian revision: $(DEB_VERSION_EPOCH_UPSTREAM)'
	@echo '# DEB_VERSION_UPSTREAM_REVISION: the packages version without the Debian epoch: $(DEB_VERSION_UPSTREAM_REVISION)'
	@echo '# DEB_VERSION_UPSTREAM: the packages upstream version: $(DEB_VERSION_UPSTREAM)'
	@echo '# DEB_DISTRIBUTION: the distribution(s) listed in the current entry of debian/changelog: $(DEB_DISTRIBUTION)'

## Expand package tarball into debian/tmp dir.
#	@echo 'Expand install package...'
#	mkdir $(bin_root)
#	tar xzvf ../$(pkg_name)-$(pkg_ver).$(pkg_arch).$(pkg_ext) -C $(bin_root)
#	mv $(bin_root)/$(pkg_name)-$(pkg_ver) $(bin_root)/$(pkg_name)
#	chmod ugo-x $(bin_root)/$(pkg_name)/share/appdata/*
#	chmod ugo-x $(bin_root)/$(pkg_name)/libraries/MCAD/*.scad
#	chmod ugo-x $(bin_root)/$(pkg_name)/libraries/MCAD/*.txt
#	chmod ugo-x $(bin_root)/$(pkg_name)/libraries/MCAD/*.markdown
#	chmod ugo-x $(bin_root)/$(pkg_name)/libraries/MCAD/TODO
#	chmod ugo-x $(bin_root)/$(pkg_name)/libraries/MCAD/bitmap/*
#	$(call inst,share/appdata/openscad.xml,.sharedmimeinfo)
#
#override_dh_icons:
#	$(call inst,share/appdata/openscad.png,/usr/share/pixmaps/)
#	dh_icons
#
##override_dh_installexamples:
##	$(call inst,examples/*,/usr/share/openscad/examples/)
#
#override_dh_makeshlibs:
## skipped
#
#override_dh_shlibdeps:
## skipped
#
