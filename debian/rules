#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

# This has to be exported to make some magic below work.
#export DH_OPTIONS #= -v
export DH_OPTIONS = -v

# The build architecture is the architecture on which debian/rules is run
# and the package build is performed.
# The host architecture is the architecture on which the resulting package
# will be installed and run.
# These are normally the same, but may be different in the case of cross-compilation
# (building packages for one architecture on machines of a different architecture).

# Variables set for cross-compiling:
# build i386 package on amd64 (x86-64) machine
# simply uncomment all variables & use debuild -b -ai386

### architecture on which debian/rules is run and the package build is performed - amd64.
ifeq (DEB_BUILD_ARCH,amd64)
### Target architecture on which the resulting package# will be installed and run i386.
  DEB_HOST_ARCH = i386      # the Debian architecture
  DEB_HOST_ARCH_CPU=i386    # the Debian CPU name
  DEB_HOST_ARCH_OS=linux    # the Debian System name
  DEB_HOST_ARCH_BITS=32
  DEB_HOST_ARCH_ENDIAN=little
  DEB_HOST_GNU_CPU=i686     # the CPU part of DEB_*_GNU_TYPE
  DEB_HOST_GNU_SYSTEM=linux-gnu # the System part of DEB_*_GNU_TYPE
  DEB_HOST_GNU_TYPE=i686-linux-gnu  # the GNU style architecture specification string
  #DEB_HOST_MULTIARCH=i686-linux-gnu
endif

#It is important to understand that the DEB_*_ARCH string
# only determines which Debian architecture we are building on or for.
# It should not be used to get the CPU or system information;
# the DEB_*_ARCH_CPU and DEB_*_ARCH_OS variables should be used for that.
# GNU style variables should generally only be used with upstream build systems.



# Makefile snippet defining the following variables:
#
# DEB_SOURCE: the source package name
# DEB_VERSION: the full version of the package (epoch + upstream vers. + revision)
# DEB_VERSION_EPOCH_UPSTREAM: the package's version without the Debian revision
# DEB_VERSION_UPSTREAM_REVISION: the package's version without the Debian epoch
# DEB_VERSION_UPSTREAM: the package's upstream version
# DEB_DISTRIBUTION: the distribution(s) listed in the current entry of debian/changelog
include /usr/share/dpkg/pkg-info.mk


# запускаем все остальные deb-helper'ы "по умолчанию"
# (про которые мы как раз ничего не знаем):
%:
	dh $@ 

pkg_ext = tar.gz

deb_ = debian
#pkg_root = $(deb_)/openscad
#src_org = $(deb_)/source
bin_root = $(deb_)/tmp
org_pkg := $(shell tar -tzf ../$(DEB_SOURCE)_$(DEB_VERSION_EPOCH_UPSTREAM).orig.$(pkg_ext) | grep -m1 'install\.sh')
org_pkg := $(shell dirname $(org_pkg))
icon_path = $(deb_)/$(DEB_SOURCE)/usr/share/icons
loicono = 16 32
allicons = $(wildcard $(icon_path)/*.png)

instune = $1 $(deb_)/$(DEB_SOURCE)$(4)/$(2) $(deb_)/$(DEB_SOURCE)$(4)/$(3)


override_dh_prep:
 
	dh_prep --exclude=debian/tmp
	@echo '===>> Expand install package...'
	mkdir $(bin_root)
#!#	tar -xzvf ../$(DEB_SOURCE)_$(DEB_VERSION_EPOCH_UPSTREAM).orig.$(pkg_ext) -C $(bin_root)

override_dh_installdirs:
# skipped

override_dh_auto_install:
#--------------------------------------------------
#!#	$(bin_root)/$(org_pkg)/install.sh -I debian/$(DEB_SOURCE)/usr -s
#!##	rm debian/$(DEB_SOURCE)/usr/share/doc
#!#	$(call instune,mv,doc,license.txt,/usr/share)
#  -I, --install-dir <dir>     specify install directory
#  -s, --suppress-shortcut     do NOT install desktop shortcut
	dh_installdirs
	cp -ar stub/share $(deb_)/$(DEB_SOURCE)/usr


$(loicono):
	cp $(icon_path)/komodo$@.png $(icon_path)/locolor/$@x$@/apps

loicons: | $(loicono)
	#

#$(wildcard $(icon_path)/*.png):
#$(allicons):
#komodo128.png:
$(notdir $(wildcard $(icon_path)/*.png)):
	echo Icon processing $@
#	echo Icon processing

#icons: | loicons $(wildcards $(deb_)/$(DEB_SOURCE)/usr/share/icons/*.png)
#icons: loicons
#icons: | $(wildcard $(icon_path)/*.png)
#icons: | $(allicons)
#icons: | komodo128.png
icons: | $(notdir $(wildcard $(icon_path)/*.png))
#	#
#	echo Icon processing $@
#	echo Icon processing $@
#	echo all icons: $(wildcard $(icon_path)/*.png)
#	echo 'list of icons:'
#	ls $(icon_path)
#	echo allicons - $(allicons)

override_dh_icons: einstune = echo $(instune)
override_dh_icons: reinst = $(call einstune,mv,$(1),$(2),$(3))
override_dh_icons: instclone = $(call einstune,cp,$(1),$(2),$(3))
# icontune: move icon to corrct place. icontune, {size}, {ext}, {lo/hi}
override_dh_icons: icontune = $(call reinst,komodo$(1).$(2)\
,$(3)color/$(1)x$(1)/apps,/usr/share/icons)
override_dh_icons: icons

	$(call instclone,komodo16.png,locolor/16x16/apps,/usr/share/icons)
#	$(call reinst,komodo16.png,hicolor/16x16/apps,/usr/share/icons)
	$(call icontune,16,png,hi,)
	$(call instclone,komodo32.png,locolor/32x32/apps,/usr/share/icons)
#	$(call reinst,komodo32.png,hicolor/32x32/apps,/usr/share/icons)
	$(call icontune,32,png,hi,)
	dh_icons
#
##override_dh_installexamples:
##	$(call inst,examples/*,/usr/share/openscad/examples/)

override_dh_makeshlibs:
# skipped

override_dh_shlibdeps:
# skipped

override_dh_strip:
# skipped

